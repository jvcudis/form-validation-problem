{"version":3,"sources":["components/CustomInput.js","components/CustomButton.js","components/CustomSelect.js","components/CustomCheckbox.js","AnimalOptions.js","MainForm.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","textField","marginBottom","spacing","marginLeft","marginRight","CustomInput","name","label","type","errors","register","classes","hasError","undefined","TextField","id","className","fullWidth","error","inputRef","InputLabelProps","shrink","helperText","message","variant","hiddenInput","display","CustomButton","color","htmlFor","Button","component","marginTop","menu","width","CustomSelect","choice","options","setValue","triggerValidation","isSubmitted","React","useState","selected","colors","setSelectValue","useEffect","value","select","onChange","event","target","SelectProps","MenuProps","margin","map","option","MenuItem","key","CustomCheckbox","handleChange","FormControlLabel","control","Checkbox","formContainer","AnimalOptions","getValues","animalNames","opt","hasErrors","a","checked","animal","FormControl","FormLabel","FormGroup","FormHelperText","appBar","position","layout","breakpoints","up","paper","padding","formTitle","textAlign","formSubTitle","formSubContainer","formButtons","justifyContent","colorOptions","animalOptions","MainForm","useForm","handleSubmit","watch","formState","created","data","account","setAccount","AppBar","Toolbar","Typography","noWrap","Container","Paper","email","align","colour","animals","idx","Fragment","length","tigerType","onSubmit","selectedAnimals","filter","color_choice","tiger_type","Grid","container","item","xs","sm","pattern","required","validate","values","getAnimalSelected","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7eda529.chunk.js","sourcesContent":["import React from 'react'\nimport { TextField } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  textField: {\n    marginBottom: theme.spacing(2),\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  }\n}))\n\nexport default function CustomInput({\n  name = 'textfield',\n  label = 'Enter text',\n  type = 'text',\n  errors = {},\n  register = () => {}\n}) {\n  const classes = useStyles()\n  const hasError = errors[name] !== undefined\n  return (\n    <TextField\n      id={name}\n      name={name}\n      label={label}\n      className={classes.textField}\n      type={type}\n      fullWidth\n      error={hasError}\n      inputRef={register}\n      InputLabelProps={{\n        shrink: true\n      }}\n      helperText={hasError ? (errors[name].message || `${label} is invalid.`) : ''}\n      variant='outlined'\n    />\n  )\n}\n","import React from 'react'\nimport { Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  hiddenInput: {\n    display: 'none'\n  }\n}))\n\nexport default function CustomButton({\n  name = 'submit-button',\n  label = '',\n  type = 'submit',\n  color = 'primary'\n}) {\n  const classes = useStyles()\n  return (\n    <>\n      <input type={type} id={name} className={classes.hiddenInput} />\n      <label htmlFor={name}>\n        <Button variant='contained' color={color} component='span'>\n          {label}\n        </Button>\n      </label>\n    </>\n  )\n}\n","import React from 'react'\nimport { TextField, MenuItem } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  textField: {\n    marginTop: theme.spacing(0),\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1)\n  },\n  menu: {\n    width: 200\n  }\n}))\n\nexport default function CustomSelect({\n  name,\n  label,\n  choice,\n  options = [],\n  errors = {},\n  setValue,\n  triggerValidation,\n  isSubmitted,\n  register\n}) {\n  const classes = useStyles()\n  const [colors, setSelectValue] = React.useState({ selected: '' })\n  const handleChange = event => {\n    const selected = event.target.value\n    setValue(choice, selected)\n    setSelectValue({ selected })\n    if(isSubmitted) {\n      triggerValidation({ name: choice })\n    }\n  }\n\n  React.useEffect(() => {\n    register({ name: choice, value: '' })\n  }, [register, choice])\n\n  return (\n    <TextField\n      id={name}\n      name={name}\n      label={label}\n      value={colors.selected}\n      className={classes.textField}\n      select\n      fullWidth\n      error={errors[choice] !== undefined}\n      onChange={handleChange}\n      SelectProps={{\n        MenuProps: {\n          className: classes.menu\n        },\n      }}\n      helperText={errors[choice] && errors[choice].message}\n      margin='normal'\n      variant='outlined'\n    >\n      {options.map(option => (\n        <MenuItem key={option.value} value={option.value}>\n          {option.label}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n}\n","import React from 'react'\nimport { FormControlLabel, Checkbox } from '@material-ui/core'\n\nexport default function CustomCheckbox({\n  name,\n  value = '',\n  label = '',\n  handleChange = (name) => {}\n}) {\n  return (\n    <FormControlLabel\n      control={<Checkbox onChange={handleChange(name)} value={value} />}\n      label={label}\n    />\n  )\n}\n","import React from 'react'\nimport { FormControl, FormGroup, FormLabel, FormHelperText } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport CustomCheckbox from './components/CustomCheckbox'\n\nconst useStyles = makeStyles(theme => ({\n  formContainer: {\n    marginLeft: theme.spacing(1),\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(3),\n  },\n}))\n\nexport default function AnimalOptions({\n  name,\n  label,\n  options = [],\n  errors = {},\n  setValue,\n  triggerValidation,\n  isSubmitted,\n  getValues,\n  register\n}) {\n  const classes = useStyles()\n  const animalNames = options.map(opt => {\n    return { name: opt.name }\n  })\n\n  // This can be better I think\n  const hasErrors = errors['animal.bear'] || errors['animal.tiger'] || errors['animal.snake'] || errors['animal.donkey']\n\n  const handleChange = name => async (event) => {\n    setValue(name, event.target.checked)\n\n    // Trigger validation when form has been submitted\n    if(isSubmitted) {\n      await triggerValidation(animalNames)\n    }\n    // When tiger is selected/unselected\n    if (!getValues()['animal.tiger']) {\n      setValue('tiger_type', '')\n    } else {\n      if(isSubmitted) {\n        await triggerValidation({ name: 'tiger_type' })\n      }\n    }\n  }\n\n  React.useEffect(() => {\n    animalNames.map(animal => register({ name: animal.name, value: false }))\n  }, [register, animalNames])\n\n  return (\n    <FormControl component=\"fieldset\" error={(hasErrors !== undefined)} className={classes.formContainer}>\n      <FormLabel>{label}</FormLabel>\n      <FormGroup>\n        {options.map(option => (\n          <CustomCheckbox key={option.name} name={option.name} value={option.value} label={option.label} handleChange={handleChange} />\n        ))}\n      </FormGroup>\n      <FormHelperText id={`${name}-helper-text`}>{hasErrors && 'Please select at least two animals.'}</FormHelperText>\n    </FormControl>\n  )\n}\n","import React from 'react'\nimport useForm from 'react-hook-form'\nimport CustomInput from './components/CustomInput'\nimport CustomButton from './components/CustomButton'\nimport CustomSelect from './components/CustomSelect'\nimport AnimalOptions from './AnimalOptions'\n\nimport { AppBar, Toolbar, Typography, Container, Paper, Grid } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    position: 'relative'\n  },\n  layout: {\n    width: 'auto',\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(800 + theme.spacing(2) * 2)]: {\n      width: 800,\n      marginLeft: 'auto',\n      marginRight: 'auto'\n    }\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(800 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3)\n    }\n  },\n  formTitle: {\n    textAlign: 'center',\n    marginBottom: theme.spacing(6)\n  },\n  formSubTitle: {\n    marginBottom: theme.spacing(2)\n  },\n  formSubContainer: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3)\n  },\n  formButtons: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    margin: theme.spacing(1)\n  }\n}))\n\nconst colorOptions = [\n  { label: 'Blue', value: 'blue' },\n  { label: 'Green', value: 'green' },\n  { label: 'Red', value: 'red' },\n  { label: 'Black', value: 'black' },\n  { label: 'Brown', value: 'brown' }\n]\n\nconst animalOptions = [\n  { name: 'animal.bear', value: 'bear', label: 'Bear' },\n  { name: 'animal.tiger', value: 'tiger', label: 'Tiger' },\n  { name: 'animal.snake', value: 'snake', label: 'Snake' },\n  { name: 'animal.donkey', value: 'donkey', label: 'Donkey' },\n]\n\nexport default function MainForm() {\n  const classes = useStyles()\n  const { register, handleSubmit, errors, setValue, getValues, triggerValidation, watch, formState } = useForm()\n\n  const [account, setAccount] = React.useState({ created: false, data: {} })\n  const onSubmit = data => {\n    const selectedAnimals = animalOptions\n      .filter(animal => data.animal[animal.value])\n      .map(animal => animal.label)\n\n    setAccount({\n      created: true,\n      data: {\n        email: data.email,\n        colour: data.color_choice,\n        animals: selectedAnimals,\n        tigerType: data.tiger_type\n      }\n    })\n  }\n\n  const getAnimalSelected = () => {\n    const values = getValues()\n    const selectedList = animalOptions.map(animal => {\n      return values[animal.name] ? animal.name : null\n    })\n    return selectedList.filter(value => value !== null)\n  }\n\n  return (\n    <>\n      <AppBar className={classes.appBar}>\n        <Toolbar>\n          <Typography variant='h6' noWrap>\n            (っ◕‿◕)っ Springload Form Validation Implementation\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container className={classes.layout}>\n        {account.created ? (\n          <Paper className={classes.paper}>\n            <Typography variant='h4' id='account-created-message' className={classes.formTitle}>\n              Yay! Account successfully created for <strong>{account.data.email}</strong>!\n            </Typography>\n            <Typography variant='h5' id='account-created-details' align='center'>\n              You have chosen <strong>{account.data.colour}</strong> for colour, also\n                {account.data.animals.map((animal, idx) => (\n                  <React.Fragment key={idx}>{(idx === account.data.animals.length - 1) ? ' and ' : (idx === 0 ? ' ' : ', ')}\n                    <strong>{animal}</strong>\n                  </React.Fragment>\n                ))} for animals {account.data.tigerType ? (<>with tiger type value set to <strong>{account.data.tigerType}</strong>.</>) : (<>.</>)}\n            </Typography>\n          </Paper>\n        ) : (\n          <Paper className={classes.paper}>\n            <Typography variant='h4' className={classes.formTitle}>\n              Fill out this awesome form\n            </Typography>\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <Grid container className={classes.formSubContainer}>\n                <Grid item xs={6} sm={4}>\n                  <Typography variant=\"h6\" className={classes.formSubTitle}>\n                    Your details\n                  </Typography>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <CustomInput\n                    name='email'\n                    label='Email'\n                    type='text'\n                    errors={errors}\n                    register={register({\n                      pattern: {\n                        value: /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/,\n                        message: 'Please input a valid email.'\n                      }\n                    })}\n                  />\n                  <CustomInput\n                    name='password'\n                    label='Password'\n                    type='password'\n                    errors={errors}\n                    register={register({\n                      pattern: {\n                        value: /^([a-zA-Z0-9@*#]{8,})$/,\n                        message: 'Please input a valid password with min length of 8.'\n                      }\n                    })}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container className={classes.formSubContainer}>\n                <Grid item xs={6} sm={4}>\n                  <Typography variant=\"h6\" className={classes.formSubTitle}>\n                    Your animal\n                  </Typography>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <CustomSelect\n                    name='colour'\n                    label='Choose colour'\n                    choice='color_choice'\n                    options={colorOptions}\n                    errors={errors}\n                    setValue={setValue}\n                    triggerValidation={triggerValidation}\n                    isSubmitted={formState.isSubmitted}\n                    register={\n                      register({\n                        required: 'Please select a colour.'\n                      })\n                    }\n                  />\n                  <AnimalOptions\n                    name='animal'\n                    label='Animal'\n                    options={animalOptions}\n                    errors={errors}\n                    setValue={setValue}\n                    triggerValidation={triggerValidation}\n                    isSubmitted={formState.isSubmitted}\n                    getValues={getValues}\n                    register={\n                      register({\n                        validate: () => {\n                          return getAnimalSelected().length > 1\n                        }\n                      })\n                    }\n                  />\n                  {watch('animal.tiger') && <CustomInput\n                    name='tiger_type'\n                    label='Type of tiger'\n                    type='text'\n                    errors={errors}\n                    register={register({\n                      pattern: {\n                        value: /^[-\\w\\s]+$/,\n                        message: 'Please input a string value.'\n                      }\n                    })}\n                  />}\n                </Grid>\n              </Grid>\n              <Grid container className={classes.formSubContainer}>\n                <Grid item xs={6} sm={4} />\n                <Grid item xs={12} sm={6} className={classes.formButtons}>\n                  <CustomButton\n                    name='create-account'\n                    label='Create account'\n                    type='submit'\n                  />\n                </Grid>\n              </Grid>\n            </form>\n          </Paper>\n        )}\n      </Container>\n    </>\n  )\n}\n","import React from 'react';\nimport MainForm from './MainForm'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}